import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from bot.common_handlers import logger, group_selection
from bot.music import create_or_update_playlist
from bot.sharing_music import handle_error_with_back_button
from bot.utils import database, format_groups_with_users
from constants import State, CallbackData


async def manage_groups_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Handles the "Manage Groups" callback. Displays the user's groups and provides options to create or delete groups.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "manage_groups_handler"')
    query = update.callback_query
    await query.answer()

    keyboard = [
        [
            InlineKeyboardButton(
                "üõ† –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É",
                callback_data=str(CallbackData.CREATE_GROUP.value),
            )
        ],
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É",
                callback_data=str(CallbackData.ADD_USER.value),
            )
        ],
        [
            InlineKeyboardButton(
                "üéß –°–æ–∑–¥–∞—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç",
                callback_data=str(CallbackData.CREATE_PLAYLIST.value),
            )
        ],
        [
            InlineKeyboardButton(
                "üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
                callback_data=str(CallbackData.DELETE_GROUP.value),
            )
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MENU.value))],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"<b>–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:</b>\n{format_groups_with_users(user.id)}",
        reply_markup=reply_markup,
        parse_mode=telegram.constants.ParseMode.HTML,
    )
    return State.START.value


async def create_group_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Handles the "Create Group" callback. Checks if the user has reached the group limit
    and prompts the user to enter a group name.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "create_group_handler"')
    query = update.callback_query
    await query.answer()

    if len(database.get_user_groups(user.id)) >= 5:
        keyboard = [
            [
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
                    callback_data=str(CallbackData.DELETE_GROUP.value),
                )
            ],
            [
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MENU.value)
                )
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚ùóÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø, –±–æ–ª—å—à–µ –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–ª—å–∑—è",
            reply_markup=reply_markup,
        )
        return State.START.value

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç—å /start –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    return State.CREATE_GROUP.value


async def receive_name_of_group_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Receives the group name from the user and creates the group in the database.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "receive_name_of_group_handler"')
    user_message = update.message.text

    database.create_group(user_message, user.id)

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MENU.value))],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f'‚úÖ –ì—Ä—É–ø–ø–∞ "{user_message}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=reply_markup
    )

    return State.START.value


async def delete_group_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Handles the "Delete Group" callback. Displays a list of the user's groups for deletion.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "delete_group_handler"')
    query = update.callback_query
    await query.answer()

    reply_markup = group_selection(user, "delete")

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=reply_markup
    )
    return State.DELETE_GROUP.value


async def confirm_group_deletion_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """
    Confirms the deletion of a group. Displays a confirmation message with options to proceed or cancel.
    """

    logger.info(f'User {update.effective_user.id} in "confirm_group_deletion_handler"')
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    group_id = int(callback_data.split("_")[1])

    keyboard = [
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data=f"exactly_{group_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MENU.value))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É {database.get_group_name(group_id)}?",
        reply_markup=reply_markup,
    )


async def delete_group_callback_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Handles the actual deletion of a group from the database.
    """

    logger.info(f'User {update.effective_user.id} in "delete_group_callback_handler"')
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    group_id = int(callback_data.split("_")[1])

    database.delete_group(group_id)

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MENU.value))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", reply_markup=reply_markup
    )

    return State.START.value


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handles the username input step. Prompts the user to enter a username (with @) to add to a group.
    """

    logger.info(f'User {update.effective_user.id} in "name_handler"')
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–º–µ—Å—Ç–µ —Å @)\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç—å /start –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )

    return State.TAKE_USERNAME.value


async def check_name_and_choose_group_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Validates the entered username and displays a list of groups to which the user can be added.
    If the username is invalid, notifies the user and provides an option to go back.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "check_name_and_choose_group_handler"')

    user_message = update.message.text
    if database.check_username(user_message):
        groups = database.get_user_groups(user.id)
        context.user_data["add_user"] = user_message

        keyboard = []
        for group in groups:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"{group.name}", callback_data=f"addUser_{group.id}"
                    )
                ]
            )

        keyboard.append(
            [
                InlineKeyboardButton(
                    f"üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MANAGE_GROUPS.value)
                )
            ]
        )
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=reply_markup,
        )
        return State.USER_TO_GROUP.value
    else:
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MANAGE_GROUPS.value)
                )
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_message} –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.\n\n–ï—Å–ª–∏ username –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.",
            reply_markup=reply_markup,
        )

        return State.START.value


async def add_user_to_the_group_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Adds the selected user to the chosen group.
    """

    logger.info(f'User {update.effective_user.id} in "add_user_to_the_group_handler"')
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    group_id = int(callback_data.split("_")[1])
    username = context.user_data["add_user"]

    if len(database.get_group_users(group_id)) == 6:
        message = f"‚ùå –í –≥—Ä—É–ø–ø–µ {database.get_group_name(group_id)} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:
        database.add_user_to_group(group_id, username)
        message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {database.get_group_name(group_id)}"

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MENU.value))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup)

    return State.START.value


async def create_playlist_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Handles the initial step of creating or updating a playlist.
    Prompts the user to select a group for which the playlist will be created/updated.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "create_playlist_handler"')
    query = update.callback_query
    await query.answer()

    reply_markup = group_selection(user, "playlist")

    await query.edit_message_text(
        "<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n\n–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø–ª–µ–π–ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, "
        "–≤ –Ω–µ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n‚ùóÔ∏è–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤ –Ω–µ–≥–æ –≤—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"
        "–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        reply_markup=reply_markup,
        parse_mode=telegram.constants.ParseMode.HTML,
    )

    return State.START.value


async def group_playlist_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    Processes the selected group and creates or updates the playlist for that group.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "group_playlist"')
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    group_id = int(callback_data.split("_")[1])

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(CallbackData.MENU.value))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await create_or_update_playlist(
            user.id, group_id, database.get_group_name(group_id)
        )
    except ValueError as e:
        return await handle_error_with_back_button(update, context, str(e))

    await query.edit_message_text(
        f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç {database.get_group_name(group_id)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω",
        reply_markup=reply_markup,
    )

    return State.START.value
