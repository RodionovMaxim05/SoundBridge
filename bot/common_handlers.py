import logging

import telegram
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    User,
)
from telegram.ext import ContextTypes

from bot.utils import database, send_or_edit_message
from constants import State, CallbackData

logger = logging.getLogger(__name__)


async def start_handler(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    """
    Handles the /start command. Initializes the bot, creates database tables,
    and inserts the user into the database. Displays a menu with options.
    """

    user = update.effective_user
    logger.info(f"User {user.id} - {user.name} started the bot.")
    database.create_tables()
    database.insert_user(user.id, user.name)

    keyboard = [
        [
            InlineKeyboardButton(
                "üìä –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç",
                callback_data=str(CallbackData.ACCOUNT.value),
            )
        ],
        [
            InlineKeyboardButton(
                "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏",
                callback_data=str(CallbackData.MANAGE_GROUPS.value),
            )
        ],
        [
            InlineKeyboardButton(
                "üîâ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—É–∑—ã–∫–æ–π",
                callback_data=str(CallbackData.SEND_MESSAGE.value),
            )
        ],
        [
            InlineKeyboardButton(
                "üíØ –û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞",
                callback_data=str(CallbackData.RATE_TRACK.value),
            )
        ],
        [
            InlineKeyboardButton(
                "üìú –ò—Å—Ç–æ—Ä–∏—è",
                callback_data=str(CallbackData.HISTORY.value),
            )
        ],
        [
            InlineKeyboardButton(
                "‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¢–æ–∫–µ–Ω",
                callback_data=str(CallbackData.UPDATE_TOKEN.value),
            )
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_or_edit_message(
        update,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=reply_markup,
    )

    return State.START.value


async def token_handler(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    """
    Handles the "Update Token" callback. Prompts the user to enter a new token.
    """

    logger.info(f'User {update.effective_user.id} in "token_handler"')
    await send_or_edit_message(
        update,
        text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç—å /start –¥–ª—è –æ—Ç–º–µ–Ω—ã\n\n‚ùóÔ∏è<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω</b>\n\n"
        '–ü–æ <b><a href="https://github.com/MarshalX/yandex-music-api/discussions/513 ">—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a></b> '
        "–æ–ø–∏—Å–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤, –Ω–æ —Å–∞–º—ã–π —É–¥–æ–±–Ω—ã–π (–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —è) - —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "
        "—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è Chrome –∏–ª–∏ Firefox: \n<b>1.</b> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n<b>2.</b> –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å "
        "(–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n<b>3.</b> –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø\n<b>4.</b> –°–Ω–æ–≤–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ "
        "—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (—Ç.–∫. —Ç–≥ –±–æ—Ç —Ç–∞–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)\n<b>5.</b> –°–Ω–∏–∑—É —Å–ª–µ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
        '"–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"\n<b>6.</b> –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å—é–¥–∞',
        parse_mode=telegram.constants.ParseMode.HTML,
    )

    return State.ENTER_TOKEN.value


async def receive_token_handler(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    """
    Receives the token from the user and updates it in the database.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "receive_token_handler"')

    user_message = update.message.text

    database.update_user_token(user.id, user_message)

    keyboard = [
        [
            InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥",
                callback_data=str(CallbackData.MENU.value),
            )
        ],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        reply_markup=reply_markup,
    )

    return State.START.value


async def account_handler(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    """
    Handles the /account command. Displays the user's account information,
    including token status and sharing statistics.
    """

    user = update.effective_user
    logger.info(f'User {user.id} in "token_handler"')

    result = database.get_user_statistic(user.id)

    token = "‚úîÔ∏è" if result.get("token") else "‚ùå"

    keyboard = [
        [
            InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥",
                callback_data=str(CallbackData.MENU.value),
            )
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    score_rated = result.get("score_of_rated_music")
    score_shared = result.get("score_of_shared_music")
    score_rated_str = (
        f"{score_rated:.2f}" if isinstance(score_rated, (int, float)) else score_rated
    )
    score_shared_str = (
        f"{score_shared:.2f}"
        if isinstance(score_shared, (int, float))
        else score_shared
    )

    await send_or_edit_message(
        update,
        text=f"<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç\n\n–¢–æ–∫–µ–Ω:</b> {token}\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üíΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å: <b>{result.get('count_of_sharing')}</b>\n\n"
        f"üíØ –°—Ä–µ–¥–Ω—è—è –≤–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: <b>{score_rated_str}</b>\n\n"
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–∞—à–µ–π –º—É–∑—ã–∫–µ: <b>{score_shared_str}</b>\n",
        reply_markup=reply_markup,
        parse_mode=telegram.constants.ParseMode.HTML,
    )

    return State.START.value


def group_selection(user: User, cl_data: str) -> InlineKeyboardMarkup:
    """
    Creates an inline keyboard markup for selecting a group.
    """

    groups = database.get_user_groups(user.id)

    keyboard = []
    for group in groups:
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"{group.name}",
                    callback_data=f"{cl_data}_{group.id}",
                )
            ]
        )

    keyboard.append(
        [
            InlineKeyboardButton(
                f"üîô –ù–∞–∑–∞–¥",
                callback_data=str(CallbackData.MENU.value),
            )
        ]
    )
    reply_markup = InlineKeyboardMarkup(keyboard)

    return reply_markup


async def handle_error_with_back_button(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    error_message: str,
    back_button_callback_data: str = str(CallbackData.MENU.value),
    state: int = State.START.value,
) -> int:
    """
    Handles errors by displaying an error message with a "Back" button.
    """

    keyboard = [
        [
            InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥",
                callback_data=back_button_callback_data,
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_or_edit_message(
        update,
        text=error_message,
        reply_markup=reply_markup,
    )

    return state
